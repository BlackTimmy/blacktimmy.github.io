{"meta":{"title":"BlackTimmy","subtitle":null,"description":null,"author":"BlackTimmy","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Mac日式键盘的问题","slug":"Mac日式键盘的问题","date":"2017-05-09T03:57:06.000Z","updated":"2017-05-10T03:12:57.000Z","comments":true,"path":"2017/05/09/Mac日式键盘的问题/","link":"","permalink":"http://yoursite.com/2017/05/09/Mac日式键盘的问题/","excerpt":"本人入手了一款日本带回的MacBook pro，不过键盘是日式的，上面的萌萌的日文，还有不同寻常的标点符号位置着实让我蛋疼了一下。","text":"本人入手了一款日本带回的MacBook pro，不过键盘是日式的，上面的萌萌的日文，还有不同寻常的标点符号位置着实让我蛋疼了一下。在日本购买或者选择代购MacBook的朋友，大多都是着眼于日币的低汇率，所以在日本购买苹果的产品是比较实惠的。本人也是入手了一款日本带回的MacBook pro，不过键盘是日式的，上面的萌萌的日文，还有不同寻常的标点符号位置着实让我蛋疼了一下。不过经过上网各路搜索查询解决方案和本人的实践，终于找了在Mac下涉及到win系统时，键盘标点符号位置不对这种情况的解决方案。 情形一 &gt;&gt; 你安装的是OS X+Win双系统：其实问题主要是出现在使用win的过程中，在Mac 的OS X系统下只要习惯一下标点符号的位置就好了，但是当你安装了双系统之后，进入Windows系统的时候会发现键盘上标点符号位置并不是标出来的样子。重点来啦！讲了那么多废话，其实事项确定你的症状和我一样啦，哈哈哈…解决方案来啦！（1）进入设备管理器（2）展开键盘，右键选择“更新驱动程序软件”&gt;&gt;“浏览计算机以查找驱动程序软件”&gt;&gt;“从计算机的设备驱动程序列表中选取”&gt;&gt;去掉“显示兼容硬件”前面的勾&gt;&gt;左边栏往下拉到Toshiba选项，对应右边选择“Toshiba USB 109 Japanese keyboard”&gt;&gt;更行驱动程序警告，一路点“是”就好了。（3）打开“注册表编辑器”，打开方式；command+R，输入regedit回车（4）HKEY_LOCAL_MACHINE &gt;&gt;SYSTEM&gt;&gt;ControlSet001&gt;&gt;Control&gt;&gt;Keyboard Layouts 选择所有最后两位是04的文件夹，右键Layout File项“修改”，将内容改为kbdjpn.dll（5）重启！duangduangduang！ 标点符号的位置全正确啦！ 情形二 &gt;&gt; 在Mac OS X下安装Win虚拟机，基本的方法跟情形一都一样。只有第（2）点不同：（2）展开键盘，右键选择“更新驱动程序软件”&gt;&gt;“浏览计算机以查找驱动程序软件”&gt;&gt;“从计算机的设备驱动程序列表中选取”&gt;&gt;去掉“显示兼容硬件”前面的勾&gt;&gt;左边直接选择（标准键盘）选项，对应右边往上选择“Japanese PS/2 Keyboard(106/109 Key)”&gt;&gt;更行驱动程序警告，一路点“是”就好了。","categories":[{"name":"Technology","slug":"Technology","permalink":"http://yoursite.com/categories/Technology/"}],"tags":[{"name":"MacBook","slug":"MacBook","permalink":"http://yoursite.com/tags/MacBook/"}]},{"title":"Linux netstat命令","slug":"Linux-netstat命令","date":"2017-02-23T04:00:54.000Z","updated":"2017-05-12T07:20:29.000Z","comments":true,"path":"2017/02/23/Linux-netstat命令/","link":"","permalink":"http://yoursite.com/2017/02/23/Linux-netstat命令/","excerpt":"","text":"Netstat 是一款命令行工具，可用于列出系统上所有的网络套接字连接情况，包括 tcp, udp 以及 unix 套接字，另外它还能列出处于监听状态（即等待接入请求）的套接字。如果你想确认系统上的 Web 服务有没有起来，你可以查看80端口有没有打开。以上功能使 netstat 成为网管和系统管理员的必备利器。 下面通过实例介绍一下各参数的用法： 1、列出所有连接123456789101112131415$ netstat -aActive Internet connections (including servers)Proto Recv-Q Send-Q Local Address Foreign Address (state)tcp4 0 0 10.70.102.187.61221 14.17.33.220.http-alt ESTABLISHEDtcp4 0 0 10.70.102.187.61216 14.17.33.220.http-alt ESTABLISHED...udp4 0 0 *.56081 *.*udp6 0 0 *.60867 *.*...Active Multipath Internet connectionsProto/ID Flags Local Address Foreign Address (state)icm6 0 0 *.* *.*Active LOCAL (UNIX) domain socketsAddress Type Recv-Q Send-Q Inode Conn Refs Nextref Addra64c790b5e982037 stream 0 0 0 a64c790b5e9819f7 0 0 /var/run/mDNSResponder 2、只列出 TCP 或 UDP 协议的连接使用 -t 选项列出 TCP 协议的连接：使用 -u 选项列出 UDP 协议的连接：123456⇒ netstat -atActive Internet connections (including servers)Proto Recv-Q Send-Q Local Address Foreign Address (state)tcp4 0 0 192.168.1.103.52595 10.6.11.104.28901 SYN_SENTtcp4 0 0 192.168.1.103.52593 14.17.33.220.http-alt ESTABLISHED ..... 3、禁用反向域名解析，加快查询速度默认情况下 netstat 会通过反向域名解析技术查找每个 IP 地址对应的主机名。这会降低查找速度。如果你觉得 IP 地址已经足够，而没有必要知道主机名，就使用 -n 选项禁用域名解析功能。1234567⇒ netstat -antActive Internet connections (including servers)Proto Recv-Q Send-Q Local Address Foreign Address (state)tcp4 0 0 10.70.102.187.61295 14.17.33.220.8080 ESTABLISHEDtcp4 0 0 10.70.102.187.61294 14.17.33.220.8080 ESTABLISHEDtcp4 0 0 10.70.102.187.61284 14.17.33.220.80 SYN_SENTtcp6 0 0 *.4433 *.* LISTEN 4、只列出监听状态下的链接任何网络服务的后台进程都会打开一个端口，用于监听接入的请求。这些正在监听的套接字也和连接的套接字一样，也能被 netstat 列出来。使用 -l 选项列出正在监听的套接字。12345ctive Internet connectionsProto Recv-Q Send-Q Local Address Foreign Address (state)tcp4 0 0 192.168.1.103.53228 10.6.11.104.28901 SYN_SENTtcp4 0 0 192.168.1.103.53227 10.6.11.104.28901 SYN_SENTtcp4 0 0 192.168.1.103.53226 115.28.250.150.443 ESTABLISHED 现在我们可以看到处于监听状态的 TCP 端口和连接。如果你查看所有监听端口，去掉 -t 选项。如果你只想查看 UDP 端口，使用 -u 选项，代替 -t 选项。注意：不要使用 -a 选项，否则 netstat 会列出所有连接，而不仅仅是监听端口。 5、获取进程名、进程号以及用户ID查看端口和连接的信息时，能查看到它们对应的进程名和进程号对系统管理员来说是非常有帮助的。举个栗子，Apache 的 httpd 服务开启80端口，如果你要查看 http 服务是否已经启动，或者 http 服务是由 apache 还是 nginx 启动的，这时候你可以看看进程名。使用 -p 选项查看进程信息。123456$ sudo netstat -nlptActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 127.0.1.1:53 0.0.0.0:* LISTEN 1144/dnsmasqtcp 0 0 127.0.0.1:631 0.0.0.0:* LISTEN 661/cupsdtcp6 0 0 ::1:631 :::* LISTEN 661/cupsd 使用 -p 选项时，netstat 必须运行在 root 权限之下，不然它就不能得到运行在 root 权限下的进程名，而很多服务包括 http 和 ftp 都运行在 root 权限之下。相比进程名和进程号而言，查看进程的拥有者会更有用。使用 -ep 选项可以同时查看进程名和用户名。123456$ sudo netstat -ltpeActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State User Inode PID/Program nametcp 0 0 enlightened:domain *:* LISTEN root 11090 1144/dnsmasqtcp 0 0 localhost:ipp *:* LISTEN root 9755 661/cupsdtcp6 0 0 ip6-localhost:ipp [::]:* LISTEN root 9754 661/cupsd 上面列出 TCP 协议下的监听套接字，同时显示进程信息和一些额外信息。这些额外的信息包括用户名和进程的索引节点号。这个命令对网管来说很有用。注意：假如你将 -n 和 -e 选项一起使用，User 列的属性就是用户的 ID 号，而不是用户名。","categories":[{"name":"Technology","slug":"Technology","permalink":"http://yoursite.com/categories/Technology/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"Mac端iTerms2实现“复制SSH渠道”","slug":"Mac端iTerms2实现“复制SSH渠道”","date":"2017-02-14T03:30:30.000Z","updated":"2017-05-09T15:28:05.000Z","comments":true,"path":"2017/02/14/Mac端iTerms2实现“复制SSH渠道”/","link":"","permalink":"http://yoursite.com/2017/02/14/Mac端iTerms2实现“复制SSH渠道”/","excerpt":"","text":"本人在公司工作的时候使用的是Windows系统，在Windows系统下使用的软件是Xshell来登录跳板机。Xshell这个终端模拟软件的使用十分方便，建立了链接后，输入PIN+TOKEN即可成功链接，登录了跳板机之后，只需要右键当前窗口选择“复制SSH渠道”，即可实现复制当前登录的跳板机窗口。 Xsehll的方便之处在于只连接一次跳板机，之后就可以右键“复制SSH渠道”即可新打开一个链接好跳板机的窗口，不需要重复输入PIN+TOKEN，而Mac的终端并没有这样的功能。 下面来说一下如何在Mac终端里实现“复制SSH渠道”的功能：首先说明一下，在Mac上我用的是iTerms2代替了终端，因为： iTerm2 比 Mac 默认的 Terminal 终端好用，配合 Zsh 效果更棒哦! iTerm2下载连接：http://www.iterm2.com/ 选择iTerms2配色方案：https://github.com/altercation/solarized 本人使用的是Argonaut，效果大概是下面这样子的： 言归正传，在iTerms2中使用以下命令可以正常登录跳板机：ssh username@host -p 36000但是存在的弊病就是每次新开一个窗口就得重新输入PIN+TOKEN来登录跳板机。 如何实现类似Xshell的“复制SSH渠道”功能呢？1、首先，保证这个目录的存在1mkdir -p ~/.ssh/cm_socket 2、创建配置文件1vi ~/.ssh/cm_socket/config 3、编辑config配置文件为以下内容：123Host *ControlMaster autoControlPath ~/.ssh/cm_socket/%r@%h:%p 4、重启终端 ·注意点：如果没有奏效可能还需要对iTerms2做以下设置：Preference——Profiles——WorkingDirectory；选择reuse previous sessions’s directory 至此，第一次登录跳板机输入密码后，之后新开窗口登录跳板机就都不再需要密码了。这里还有技巧就是可以用快捷键cmd+t来新建会话窗口，然后设置一个快捷键来send一条命令来登录机器：例如设置fn+F1为一个快捷键，来实现向屏幕输出登录命令：ssh username@host -p 36000 5、然后使用快捷键 cmd+t 打开新的窗口，然后 fn+F1 将快捷命令输出的屏幕上，回车！你就会看到已经登录的跳板机！是不是比右键“复制会话”还要快呢！嘻嘻！ 原理很简单，开一个ssh连接在后台放着，以后再有需要用到ssh到同样主机的时候，直接使用这个连接的socket文件，不用再创建连接了，同理，也不需要再进行用户身份验证。","categories":[{"name":"Technology","slug":"Technology","permalink":"http://yoursite.com/categories/Technology/"}],"tags":[{"name":"MacBook","slug":"MacBook","permalink":"http://yoursite.com/tags/MacBook/"}]},{"title":"识别当前运行的是哪种shell","slug":"识别当前运行的是哪种shell","date":"2017-02-09T02:59:04.000Z","updated":"2017-05-09T09:12:24.000Z","comments":true,"path":"2017/02/09/识别当前运行的是哪种shell/","link":"","permalink":"http://yoursite.com/2017/02/09/识别当前运行的是哪种shell/","excerpt":"","text":"shell有多种版本，最常见的一般是bash，有可能你用的是tcsh，也可能是Zshell（zsh），我本人用的就是zsh，原因呢，蛮简单的：好用（装B）。那么如何查看自己用的是哪一种shell呢？很简单，在终端的shell提示符后输出：1echo $0 并按下RTURN键，shell就会显示你正在使用的shell名称。这条命令的原理是shell将$0展示为正在运行程序的程序名。这条命令可能会显示如下输出：12$echo $0-bash 也可能显示为：12$echo $0/bin/bash 反正我显示的是这样：12myBlog|⇒ echo $0-zsh","categories":[{"name":"Technology","slug":"Technology","permalink":"http://yoursite.com/categories/Technology/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]}]}